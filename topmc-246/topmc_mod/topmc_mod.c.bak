/*
 *  linux/init/main.c
 *
 *  Copyright (C) 1991, 1992  Linus Torvalds
 *
 *  GK 2/5/95  -  Changed to support mounting root fs via NFS
 *  Added initrd & change_root: Werner Almesberger & Hans Lermen, Feb '96
 *  Moan early if gcc is old, avoiding bogus kernels - Paul Gortmaker, May '96
 *  Simplified starting of init:  Michael A. Griffith <grif@acm.org> 
 */

#include <linux/types.h>
#include <linux/module.h>
#include <linux/proc_fs.h>
#include <linux/kernel.h>
#include <linux/syscalls.h>
#include <linux/string.h>
#include <linux/ctype.h>
#include <linux/delay.h>
#include <linux/utsname.h>
#include <linux/ioport.h>
#include <linux/init.h>
#include <linux/smp_lock.h>
#include <linux/initrd.h>
#include <linux/bootmem.h>
#include <linux/tty.h>
#include <linux/gfp.h>
#include <linux/percpu.h>
#include <linux/kmod.h>
#include <linux/vmalloc.h>
#include <linux/kernel_stat.h>
//#include <linux/start_kernel.h>
#include <linux/security.h>
#include <linux/smp.h>
#include <linux/workqueue.h>
#include <linux/profile.h>
#include <linux/rcupdate.h>
#include <linux/moduleparam.h>
#include <linux/kallsyms.h>
#include <linux/writeback.h>
#include <linux/cpu.h>
#include <linux/cpuset.h>
//#include <linux/cgroup.h>
#include <linux/efi.h>
//#include <linux/tick.h>
#include <linux/interrupt.h>
#include <linux/taskstats_kern.h>
#include <linux/delayacct.h>
#include <linux/unistd.h>
#include <linux/rmap.h>
#include <linux/mempolicy.h>
#include <linux/key.h>
#include <linux/buffer_head.h>
//#include <linux/page_cgroup.h>
#include <linux/debug_locks.h>
//#include <linux/debugobjects.h>
#include <linux/lockdep.h>
//#include <linux/pid_namespace.h>
#include <linux/device.h>
#include <linux/kthread.h>
#include <linux/sched.h>
#include <linux/signal.h>
#include <linux/idr.h>
//#include <linux/ftrace.h>
//#include <linux/async.h>
//#include <trace/boot.h>

#include <asm/io.h>
//#include <asm/bugs.h>
#include <asm/setup.h>
#include <asm/sections.h>
#include <asm/cacheflush.h>
#include <asm/smp.h>

MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("TOP Perf Counter Kernel Module");

//performance monitoring counter like top : yuanbor@2009-2-24   modified by huangy@2010-3-24

//#include <asm/Msr.h>

/* Works only for digits and letters, but small and fast */
#define TOLOWER(x) ((x) | 0x20)

#define TOPMC_PERF_PMC_MASK 0LL
//#define TOPMC_PERF_PMC_MASK   0xffff800000000000
/* incore msrs*/

/* Intel Core-based CPU performance counters */
#define MSR_CORE_PERF_FIXED_CTR0        0x00000309
#define MSR_CORE_PERF_FIXED_CTR1        0x0000030a
#define MSR_CORE_PERF_FIXED_CTR2        0x0000030b
#define MSR_CORE_PERF_FIXED_CTR_CTRL    0x0000038d
#define MSR_CORE_PERF_GLOBAL_STATUS     0x0000038e
#define MSR_CORE_PERF_GLOBAL_CTRL       0x0000038f
#define MSR_CORE_PERF_GLOBAL_OVF_CTRL   0x00000390

#define MSR_CORE_PERF_NUM_PMC 4
#define MSR_CORE_PERF_IDX_PMC 0
#define MSR_CORE_PERF_IDX_FIX 32
#define MSR_CORE_PERF_NUM_FIX 3

#define TOPMC_MSR_XEON55XX_PERFCTR0                     0x000000c1
#define TOPMC_MSR_XEON55XX_PERFCTR1                     0x000000c2
#define TOPMC_MSR_XEON55XX_PERFCTR2                     0x000000c3
#define TOPMC_MSR_XEON55XX_PERFCTR3                     0x000000c4
#define TOPMC_MSR_XEON55XX_EVNTSEL0                     0x00000186
#define TOPMC_MSR_XEON55XX_EVNTSEL1                     0x00000187
#define TOPMC_MSR_XEON55XX_EVNTSEL2                     0x00000188
#define TOPMC_MSR_XEON55XX_EVNTSEL3                     0x00000189

#define TOPMC_MSR_XEON55XX_PerfCtrNum   (TOPMC_MSR_XEON55XX_PERFCTR3-TOPMC_MSR_XEON55XX_PERFCTR0 +1)
#define TOPMC_MAX_NAMELEN       16
#define TOPMC_EVENT_LENGTH      6
#define TOPMC_EVENT_MASK_KERNEL_USER    0xf
#define TOPMC_EVENT_MASK_UNIT                   0xff0
#define TOPMC_EVENT_MASK_LOW_EVENT              0xff000
#define TOPMC_EVENT_MASK_HIGH_EVENT             0xf00000
#define TOPMC_EVENT_BITS_KERNEL_USER    0
#define TOPMC_EVENT_BITS_UNIT                   4
#define TOPMC_EVENT_BITS_LOW_EVENT              12
#define TOPMC_EVENT_BITS_HIGH_EVENT             20

#define MSR_PPRO_EVENTSEL_RESERVED      ((0xFFFFFFFFULL<<32)|(1ULL<<21))

/*offcore msrs */
#define TOPMC_MSR_XEON55XX_OFFCORE_RSP0    0x1a6

/*uncore msrs*/
#define TOPMC_MSR_XEON55XX_UNC_EVNTSEL0    0x3c0
#define TOPMC_MSR_XEON55XX_UNC_PERFCTR0    0x3b0
#define TOPMC_MSR_XEON55XX_UNC_FIXED_CTRL  0x395
#define TOPMC_MSR_XEON55XX_UNC_FIXED_CTR0  0x394
#define TOPMC_MSR_XEON55XX_UNC_ADDROP      0x396
#define TOPMC_MSR_XEON55XX_UNC_GLOBAL_CTRL 0x391
#define TOPMC_MSR_XEON55XX_UNC_GLOBAL_STAT 0x392
#define TOPMC_MSR_XEON55XX_UNC_GLOBAL_OVF_CTRL 0x393

#define TOPMC_MSR_XEON55XX_UNC_PerfCtrNum 8

#define TOPMC_MSR_XEON55XX_UNC_IDX_FIXED 32
#define TOPMC_MSR_XEON55XX_UNC_BITS_MAX_PMC 7
#define TOPMC_MSR_XEON55XX_UNC_BITS_MIN_PMC 0
#define TOPMC_MSR_XEON55XX_UNC_IDX_PMC TOPMC_MSR_XEON55XX_UNC_BITS_MIN_PMC
#define TOPMC_MSR_XEON55XX_UNC_BITS_NUM_PMC (TOPMC_MSR_XEON55XX_UNC_BITS_MAX_PMC - TOPMC_MSR_XEON55XX_UNC_BITS_MIN_PMC + 1)

#define TOPMC_MSR_XEON55XX_UNC_EVENTSEL_RESERVED ((0xFFFFFFFFULL << 32) | (1ULL << 21) | (1ULL << 19) | (1ULL << 16))

#define TOPMC_RDMSRL(msraddr, val, cpu) \
do {						\
	u32 vall, valh;	\
	rdmsr_on_cpu(cpu, msraddr, &vall, &valh);	\
	val = (u64)(vall | ((u64)valh) << 32);	\
}while(0)

/*
#define TOPMC_RDMSRL(msraddr, val, cpu)                 \
do {                                                                                            \
        u32 vall, valh;                     	\
        topmc_do_rdmsr(cpu, msraddr, &vall, &valh);       \
        val = (u64)(vall | ((u64)valh) << 32);                                  \
}while(0)
*/
#define TOPMC_WRMSRL(msraddr, val, cpu)                 \
do{						\
        wrmsr_on_cpu(cpu, msraddr, (u32)((u64)(val)), (u32)((u64)(val) >> 32));	\
}while(0)
/*
#define TOPMC_WRMSRL(msraddr, val, cpu)                 \
do{                                                                                             \
        topmc_do_wrmsr(cpu, msraddr, (u32)((u64)(val)), (u32)((u64)(val) >> 32)); \
}while(0)
*/
#define TOPMC_CTRL_SET_ACTIVE(n) (n |= (1<<22))
#define TOPMC_CTRL_SET_INACTIVE(n) (n &= ~(1<<22))
#define TOPMC_CTRL_CLEAR_LO(x) (x &= (1<<21))
#define TOPMC_CTRL_CLEAR_HI(x) (x &= 0xfffffcf0)
#define TOPMC_CTRL_SET_ENABLE(val) (val |= 1<<20)
#define TOPMC_CTRL_SET_USR(val,u) (val |= ((u & 1) << 16))
#define TOPMC_CTRL_SET_KERN(val,k) (val |= ((k & 1) << 17))
#define TOPMC_CTRL_SET_UM(val, m) (val |= (m << 8))
#define TOPMC_CTRL_SET_EVENT_LOW(val, e) (val |= (e & 0xff))

//#define TOPMC_CTRL_SET_EVENT_HIGH(val, e) (val |= ((e >> 8) & 0xf))
//#define TOPMC_CTRL_SET_HOST_ONLY(val, h) (val |= ((h & 1) << 9))
//#define TOPMC_CTRL_SET_GUEST_ONLY(val, h) (val |= ((h & 1) << 8))
//----------------------------------------------------------------

struct topmc_proc_entry{
        bool            enable;
        unsigned int                    event;//between 01~99, 00 standfor nothing,defined by ourself
        unsigned long long      value;
} topmc_procs[NR_CPUS][TOPMC_MSR_XEON55XX_PerfCtrNum + TOPMC_MSR_XEON55XX_UNC_PerfCtrNum];

/*
struct topmc_msr_command {
    int cpu;
    int err;
    u32 reg;
    u32 data[2];
};
*/
static int topmc_all_enabled = 0;
static struct proc_dir_entry * root_dir, * core_dir[NR_CPUS], * counter_dir[NR_CPUS][TOPMC_MSR_XEON55XX_PerfCtrNum + TOPMC_MSR_XEON55XX_UNC_PerfCtrNum];
static struct proc_dir_entry *enable_entry, * entry[NR_CPUS][TOPMC_MSR_XEON55XX_PerfCtrNum + TOPMC_MSR_XEON55XX_UNC_PerfCtrNum][3];

#define TOPMC_PER_SECOND
#ifdef TOPMC_PER_SECOND
unsigned long topmc_pmc_cnt_flags;
unsigned long topmc_pmc_chg_flags;

extern spinlock_t topmc_bitmap_lock;
extern spinlock_t topmc_chg_lock;
extern unsigned short topmc_pmc_cnt_bitmap;
extern unsigned int topmc_pmc_chg;

extern u64 (*topmc_value_read_callable)(unsigned short cpu, unsigned short counter);

#endif
/*
EXPORT_SYMBOL(topmc_bitmap_lock);
EXPORT_SYMBOL(topmc_chg_lock);
EXPORT_SYMBOL(topmc_pmc_cnt_bitmap);
EXPORT_SYMBOL(topmc_pmc_chg);
*/

int topmc_enable_all_read(char *page, char **start, off_t off, int count, int *eof, void *data)
{
	unsigned int mix        = (unsigned int)(long)data;
	unsigned short cpu,counter;

	topmc_split32to16(mix,&cpu,&counter);

	*page   = topmc_all_enabled==1?'1':'0';
	*(page+1) = '\n';
	return 2; //len of read
}

int topmc_enable_all_write(struct file *file, const char __user * buffer, unsigned long count, void * data)
{
	char enable;
	int cpu, counter;
	//      unsigned short cpu,counter;
	//unsigned int low=0,high=0;
	int kernel=0,user=0,event;
	unsigned long long value;
	u64 val;

	get_user(enable,buffer);
	//      printk("+->topmc_enable_all_write(): enable: %c\n", enable);
	for_each_online_cpu(cpu){
		//              printk("+->topmc_enable_all_write(): for_each_online_cpu : cpu:%d\n",cpu);
		for(counter=0;counter < TOPMC_MSR_XEON55XX_PerfCtrNum;counter++){
			//                      printk("+->topmc_enable_all_write(): for counter: counter:%d\n",counter);
			event   = topmc_procs[cpu][counter].event;
			switch((event&TOPMC_EVENT_MASK_KERNEL_USER)>>TOPMC_EVENT_BITS_KERNEL_USER){
				case 0:
					kernel=user=0;
					break;
				case 1:
					kernel=0;
					user=1;
					break;
				case 2:
					kernel=1;
					user=0;
					break;
				case 3:
					kernel=user=1;
					break;
				default:
					printk("+->topmc_enable_write():kernel_user error:%d\n",(event&TOPMC_EVENT_MASK_KERNEL_USER)>>TOPMC_EVENT_BITS_KERNEL_USER);
					break;
			}

			if(enable=='1'){
				if(topmc_procs[cpu][counter].enable==1){
					printk("+->topmc_enable_all_write(): already enabled, skip this!!!\n");
					goto out;
				}

				TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_PERFCTR0+counter, 0LL, cpu);
				TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+counter, val, cpu);
				val &= MSR_PPRO_EVENTSEL_RESERVED;
				//low = (unsigned int)(val & 0xffffffff);
				//high = (unsigned int)((val & 0xffffffff00000000) >> 32);
				TOPMC_CTRL_SET_ENABLE(val);
				TOPMC_CTRL_SET_USR(val, user);
				TOPMC_CTRL_SET_KERN(val, kernel);
				TOPMC_CTRL_SET_UM(val,(event&TOPMC_EVENT_MASK_UNIT)>>TOPMC_EVENT_BITS_UNIT);
				TOPMC_CTRL_SET_EVENT_LOW(val, (event&TOPMC_EVENT_MASK_LOW_EVENT)>>TOPMC_EVENT_BITS_LOW_EVENT);
				//TOPMC_CTRL_SET_EVENT_HIGH(high,(event&TOPMC_EVENT_MASK_HIGH_EVENT)>>TOPMC_EVENT_BITS_HIGH_EVENT);
				//TOPMC_CTRL_SET_HOST_ONLY(high, 0);
				//TOPMC_CTRL_SET_GUEST_ONLY(high, 0);

				TOPMC_CTRL_SET_ACTIVE(val);
				//val = (u64)( low | ((u64)(high) << 32));
				TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+counter, val, cpu);
				topmc_procs[cpu][counter].enable        = 1;
				//                              printk("+->topmc_enable_all_write(): abled [cpu:%2d,counter:%d,smp_processor_id:%d]high:0x%x,low:0x%x\n",cpu,counter,smp_processor_id(),high,low);
			}
			else{
				TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_PERFCTR0+counter, 0LL, cpu);
				TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+counter, val, cpu);
				val &= MSR_PPRO_EVENTSEL_RESERVED;
				TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+counter, val, cpu);
				TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_PERFCTR0+counter, val, cpu);
				value = (unsigned long long)val;
				topmc_procs[cpu][counter].value = value;
				TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_PERFCTR0+counter, 0LL, cpu);
				topmc_procs[cpu][counter].enable        = 0;
				//                              printk("+->topmc_enable_all_write(): disabled [cpu:%2d,counter:%d,smp_processor_id:%d]high:0x%x,low:0x%x\n",cpu,counter,smp_processor_id(),high,low);                                      
			}
		}
		for (counter = 0; counter < TOPMC_MSR_XEON55XX_UNC_PerfCtrNum; counter++) {
			event = topmc_procs[cpu][TOPMC_MSR_XEON55XX_PerfCtrNum+counter].event;
			if (enable == '1') {
				if( topmc_procs[cpu][TOPMC_MSR_XEON55XX_PerfCtrNum+counter].enable == 1) {
					printk("+->topmc_enable_all_write(): already enabled, skip this!!!\n");
					goto out;
				}                                     
				TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_PERFCTR0+counter, 0LL, cpu);
				TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+counter, val, cpu);
				//val &= TOPMC_MSR_XEON55XX_UNC_EVENTSEL_RESERVED;
				val &= 0ULL;
				TOPMC_CTRL_SET_ENABLE(val);
				TOPMC_CTRL_SET_UM(val, (event & TOPMC_EVENT_MASK_UNIT) >> TOPMC_EVENT_BITS_UNIT);
				TOPMC_CTRL_SET_EVENT_LOW(val, (event & TOPMC_EVENT_MASK_LOW_EVENT) >> TOPMC_EVENT_BITS_LOW_EVENT);

				TOPMC_CTRL_SET_ACTIVE(val);
				TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+counter, val, cpu);
				topmc_procs[cpu][TOPMC_MSR_XEON55XX_PerfCtrNum+counter].enable = 1;
			}
			else {
				TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_PERFCTR0+counter, 0LL, cpu);
				TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+counter, val, cpu);
				//val &= TOPMC_MSR_XEON55XX_UNC_EVENTSEL_RESERVED;
				val &= 0ULL;
				TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+counter, val, cpu);
				TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_UNC_PERFCTR0+counter, val, cpu);
				value = (unsigned long long)val;
				topmc_procs[cpu][TOPMC_MSR_XEON55XX_PerfCtrNum+counter].value = value;
				TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_PERFCTR0+counter, 0LL, cpu);
				topmc_procs[cpu][TOPMC_MSR_XEON55XX_PerfCtrNum+counter].enable = 0;
			}
		}
	}

#ifdef TOPMC_PER_SECOND
	spin_lock_irqsave(&topmc_bitmap_lock, topmc_pmc_cnt_flags);
#endif
	if(enable=='1')
	{
		topmc_all_enabled       = 1;
#ifdef TOPMC_PER_SECOND
		set_topmc_cnt_all(topmc_pmc_cnt_bitmap);
#endif
	}
	else
	{
		topmc_all_enabled       = 0;
#ifdef TOPMC_PER_SECOND
		clr_topmc_cnt_all(topmc_pmc_cnt_bitmap);
#endif
	}
#ifdef TOPMC_PER_SECOND
	spin_unlock_irqrestore(&topmc_bitmap_lock, topmc_pmc_cnt_flags);
	spin_lock_irqsave(&topmc_chg_lock, topmc_pmc_chg_flags);
//	printk("topmc_enable_all_write: before topmc_pmc_chg=%d\n",topmc_pmc_chg);
	topmc_pmc_chg = 1;
//	printk("topmc_enable_all_write: after topmc_pmc_chg=%d\n",topmc_pmc_chg);
	spin_unlock_irqrestore(&topmc_chg_lock, topmc_pmc_chg_flags);
#endif
out:
	return count;
}


int topmc_enable_read(char *page, char **start, off_t off, int count, int *eof, void *data)
{
	unsigned int mix        = (unsigned int)(long)data;
	unsigned short cpu,counter;

	topmc_split32to16(mix,&cpu,&counter);

	*page   = topmc_procs[cpu][counter].enable==1?'1':'0';
	*(page+1) = '\n';
	return 2; //len of read
}


int topmc_enable_write(struct file *file, const char __user * buffer, unsigned long count, void * data)
{
	char enable;
	unsigned int mix        = (unsigned int)(long)data;
	unsigned short cpu,counter;
	//unsigned int low = 0,high =0;
	int kernel=0,user=0,event;
	unsigned long long value;
	u64 val = 0;

	topmc_split32to16(mix,&cpu,&counter);
	get_user(enable,buffer);

	event   = topmc_procs[cpu][counter].event;
	if (counter < TOPMC_MSR_XEON55XX_PerfCtrNum) {
		switch((event&TOPMC_EVENT_MASK_KERNEL_USER)>>TOPMC_EVENT_BITS_KERNEL_USER){
			case 0:
				kernel=user=0;
				break;
			case 1:
				kernel=0;
				user=1;
				break;
			case 2:
				kernel=1;
				user=0;
				break;
			case 3:
				kernel=user=1;
				break;
			default:
				printk("+->topmc_enable_write():kernel_user error:%d\n",(event&TOPMC_EVENT_MASK_KERNEL_USER)>>TOPMC_EVENT_BITS_KERNEL_USER);
				break;
		}
		if(enable=='1'){
			if(topmc_procs[cpu][counter].enable==1){
				printk("+->topmc_enable_write():already enabled, skip this!!!\n");
				goto out;
			}
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_PERFCTR0+counter, 0LL, cpu);
			TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+counter, val, cpu);
			val &= MSR_PPRO_EVENTSEL_RESERVED;
			//low = (unsigned int)(val & 0xffff);
			//high = (unsigned int)((val & 0xffff0000) >> 32);
			TOPMC_CTRL_SET_ENABLE(val);
			TOPMC_CTRL_SET_USR(val, user);
			TOPMC_CTRL_SET_KERN(val, kernel);
			TOPMC_CTRL_SET_UM(val,(event&TOPMC_EVENT_MASK_UNIT)>>TOPMC_EVENT_BITS_UNIT);
			TOPMC_CTRL_SET_EVENT_LOW(val, (event&TOPMC_EVENT_MASK_LOW_EVENT)>>TOPMC_EVENT_BITS_LOW_EVENT);
			//TOPMC_CTRL_SET_EVENT_HIGH(high,(event&TOPMC_EVENT_MASK_HIGH_EVENT)>>TOPMC_EVENT_BITS_HIGH_EVENT);
			//TOPMC_CTRL_SET_HOST_ONLY(high, 0);
			//TOPMC_CTRL_SET_GUEST_ONLY(high, 0);

			TOPMC_CTRL_SET_ACTIVE(val);
			//val = (u64)( low | ((u64)(high) << 32));
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+counter, val, cpu);
			topmc_procs[cpu][counter].enable        = 1;
		}
		else{
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_PERFCTR0+counter, 0LL, cpu);
			TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+counter, val, cpu);
			val &= MSR_PPRO_EVENTSEL_RESERVED;
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+counter, val, cpu);
			TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_PERFCTR0+counter, val, cpu);
			value = (unsigned long long)val;
			topmc_procs[cpu][counter].value = value;
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_PERFCTR0+counter, 0LL, cpu);
			topmc_procs[cpu][counter].enable        = 0;
		}
	}
	else if ((counter >= TOPMC_MSR_XEON55XX_PerfCtrNum) && (counter < TOPMC_MSR_XEON55XX_PerfCtrNum + TOPMC_MSR_XEON55XX_UNC_PerfCtrNum)) {
		event = topmc_procs[cpu][counter].event;
		if (enable == '1') {
			if( topmc_procs[cpu][counter].enable == 1) {
				printk("+->topmc_enable_write(): already enabled, skip this!!!\n");
				goto out;
			}
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_PERFCTR0+counter- TOPMC_MSR_XEON55XX_PerfCtrNum, 0LL, cpu);
			TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+counter- TOPMC_MSR_XEON55XX_PerfCtrNum, val, cpu);
			//val &= TOPMC_MSR_XEON55XX_UNC_EVENTSEL_RESERVED;
			val &= 0ULL;
			TOPMC_CTRL_SET_ENABLE(val);
			//printk("+->topmc_enable_write(): event: %d\n", event);
			TOPMC_CTRL_SET_UM(val, (event & TOPMC_EVENT_MASK_UNIT) >> TOPMC_EVENT_BITS_UNIT);
			//printk("+->topmc_enable_wirte(): val:%llu event_mask:%d\n",val, event & TOPMC_EVENT_MASK_UNIT);
			TOPMC_CTRL_SET_EVENT_LOW(val, (event & TOPMC_EVENT_MASK_LOW_EVENT) >> TOPMC_EVENT_BITS_LOW_EVENT);
			//printk("+->topmc_enable_wirte(): val:%llu event_mask_mask:%d\n",val, event & TOPMC_EVENT_MASK_LOW_EVENT);

			TOPMC_CTRL_SET_ACTIVE(val);
			//printk("+->topmc_enable_wirte(): val:%llu\n",val);
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+counter- TOPMC_MSR_XEON55XX_PerfCtrNum, val, cpu);
			topmc_procs[cpu][counter].enable = 1;
			//printk("+->topmc_enable_write() enabled [cpu:%2d,counter:%d,smp_processor_id:%d]mask:%llu\n",cpu,counter,smp_processor_id(),val);
		}
		else {
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_PERFCTR0+counter- TOPMC_MSR_XEON55XX_PerfCtrNum, 0LL, cpu);
			TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+counter- TOPMC_MSR_XEON55XX_PerfCtrNum, val, cpu);
			//val &= TOPMC_MSR_XEON55XX_UNC_EVENTSEL_RESERVED;
			val &= 0ULL;
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+counter- TOPMC_MSR_XEON55XX_PerfCtrNum, val, cpu);
			TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_UNC_PERFCTR0+counter- TOPMC_MSR_XEON55XX_PerfCtrNum, val, cpu);
			value = (unsigned long long)val;
			topmc_procs[cpu][counter].value = value;
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_PERFCTR0+counter- TOPMC_MSR_XEON55XX_PerfCtrNum, 0LL, cpu);
			topmc_procs[cpu][counter].enable = 0;
			//printk("+->topmc_enable_write() disenabled[cpu:%2d,counter:%d,smp_processor_id:%d]mask:%llu\n",cpu,counter,smp_processor_id(),val);
		}
	}
	//display some useful information
	// printk("+->topmc_enable_write() [cpu:%2d,counter:%d,smp_processor_id:%d]mask:%llu\n",cpu,counter,smp_processor_id(),val);
	
#ifdef TOPMC_PER_SECOND
	spin_lock_irqsave(&topmc_bitmap_lock, topmc_pmc_cnt_flags);
	if(enable == '1')
	{
		set_topmc_cnt(topmc_pmc_cnt_bitmap, counter);
	}
	else
	{
		clr_topmc_cnt(topmc_pmc_cnt_bitmap, counter);
	}
	spin_unlock_irqrestore(&topmc_bitmap_lock, topmc_pmc_cnt_flags);
	spin_lock_irqsave(&topmc_chg_lock, topmc_pmc_chg_flags);
//	printk("topmc_enable_write: before topmc_pmc_chg=%d\n",topmc_pmc_chg);
	topmc_pmc_chg = 1;
//	printk("topmc_enable_write: after topmc_pmc_chg=%d\n",topmc_pmc_chg);
	spin_unlock_irqrestore(&topmc_chg_lock, topmc_pmc_chg_flags);
#endif
out:
	return count;
}


/*                      
event format:           
                        
[*][*][*]|[-][-]|[+]    
event    |unit  |kernel/user
                
all of the above values are hex value such as 0xa98d
event--MUST BE three numbers
unit---MUST BE two numbers
kernel/user---MUST BE one of the following number: 0-"neither",1-"only user",2-"only kernel",3-"both"

*/
int topmc_event_read(char *page, char **start, off_t off, int count, int *eof, void *data)
{
	unsigned int mix        = (unsigned int)(long)data;
	unsigned short cpu,counter;

	topmc_split32to16(mix,&cpu,&counter);

	sprintf(page,"%u\n",topmc_procs[cpu][counter].event);

	return strlen(page); //len of read, event must between 01~99
}

int topmc_event_write(struct file *file, const char __user * buffer, unsigned long count, void * data)
{
	char event[TOPMC_EVENT_LENGTH];
	unsigned int mix        = (unsigned int)(long)data;
	unsigned short cpu,counter;
	int i;
	long ret;

	topmc_split32to16(mix,&cpu,&counter);

	ret     = strncpy_from_user(event,buffer,TOPMC_EVENT_LENGTH);
	if (ret < 0)
		return -EFAULT;
	if (ret == 0 || ret > TOPMC_EVENT_LENGTH)
		return -EINVAL;

	for(i=0;i<TOPMC_EVENT_LENGTH;i++){
		if(!isxdigit(event[i])){
			topmc_procs[cpu][counter].event = 0;
			printk("+->topmc_event_write():event error:%s!!!\n",event);
			goto out;
		}
	}

	topmc_procs[cpu][counter].event = topmc_str2int(event,6,16);
out:
	return count;
}


#ifdef TOPMC_PER_SECOND
u64 topmc_value_read_callable_impl(unsigned short cpu, unsigned short counter)
{
	u64 val;
	u32 lo,hi;
	unsigned int perfctr;

	if(counter>=TOPMC_MSR_XEON55XX_PerfCtrNum + TOPMC_MSR_XEON55XX_UNC_PerfCtrNum){
		printk("+->topmc: topmc_value_read(): counter err : %d!!!\n",counter);

		return 0;
	}

	if(counter < TOPMC_MSR_XEON55XX_PerfCtrNum) {
		perfctr = TOPMC_MSR_XEON55XX_PERFCTR0 + counter;
		//      perfctrl = TOPMC_MSR_XEON55XX_EVNTSEL0 + counter;
	}
	else {  
		perfctr =  TOPMC_MSR_XEON55XX_UNC_PERFCTR0 + counter - TOPMC_MSR_XEON55XX_PerfCtrNum;
		//      perfctrl = TOPMC_MSR_XEON55XX_UNC_EVNTSEL0 + counter - TOPMC_MSR_XEON55XX_PerfCtrNum;
	}
	/*      

		printk("+->topmc_value_read(): read performance counter:%x\n",perfctr);
		TOPMC_RDMSRL(perfctrl, val_ctrl, cpu);
		printk("+->topmc_value_read(): eventselect: %llu\n", val_ctrl);
	 */
	/*
	   if(topmc_procs[cpu][counter].enable == 1){
	//      printk("+->topmc_value_read() : enable ==1   \n");
	TOPMC_RDMSRL(perfctr, val, cpu);
	}else{
	//      printk("+->topmc_value_read() : enable == 0\n");
	val = topmc_procs[cpu][counter].value;
	}
	 */
//	printk("topmc_value_read_callable:perfctr= %x\n", perfctr);
	__asm__ __volatile__ ("rdmsr" : "=a" (lo), "=d" (hi) : "c" (perfctr));
	val = (u64)hi<<32 | lo;
//	val = counter + cpu;
//	printk("topmc_value_read_callable: %llu\n", val);
	return val;
}

#endif
//EXPORT_SYMBOL(topmc_value_read_callable);

int topmc_value_read(char *page, char **start, off_t off, int count, int *eof, void *data)
{
	unsigned int perfctr;
	//unsigned int perfctrl;
	unsigned int mix        = (unsigned int)(long)data;
	unsigned short cpu,counter;
	u64 val;
	//u64 val_ctrl;

	topmc_split32to16(mix,&cpu,&counter);

	if(counter>=TOPMC_MSR_XEON55XX_PerfCtrNum + TOPMC_MSR_XEON55XX_UNC_PerfCtrNum){
		printk("+->topmc: topmc_value_read(): counter err : %d!!!\n",counter);

		return 0;
	}

	if(counter < TOPMC_MSR_XEON55XX_PerfCtrNum) {
		perfctr = TOPMC_MSR_XEON55XX_PERFCTR0 + counter;
		//      perfctrl = TOPMC_MSR_XEON55XX_EVNTSEL0 + counter;
	}
	else {
		perfctr =  TOPMC_MSR_XEON55XX_UNC_PERFCTR0 + counter - TOPMC_MSR_XEON55XX_PerfCtrNum;
		//      perfctrl = TOPMC_MSR_XEON55XX_UNC_EVNTSEL0 + counter - TOPMC_MSR_XEON55XX_PerfCtrNum;
	}
	/*      

		printk("+->topmc_value_read(): read performance counter:%x\n",perfctr);
		TOPMC_RDMSRL(perfctrl, val_ctrl, cpu);
		printk("+->topmc_value_read(): eventselect: %llu\n", val_ctrl);
	 */
	if(topmc_procs[cpu][counter].enable == 1){
		//      printk("+->topmc_value_read() : enable ==1   \n");
		TOPMC_RDMSRL(perfctr, val, cpu);
		sprintf(page, "%llu\n", val);

	}else{
		//      printk("+->topmc_value_read() : enable == 0\n");
		sprintf(page,"%llu\n",topmc_procs[cpu][counter].value);
	}

	return strlen(page); //len of read
}

int topmc_value_write(struct file *file, const char __user * buffer, unsigned long count, void * data)
{
	unsigned int mix        = (unsigned int)(long)data;
	unsigned short cpu,counter;
	u64 val;

	topmc_split32to16(mix,&cpu,&counter);

	if(counter>=TOPMC_MSR_XEON55XX_PerfCtrNum + TOPMC_MSR_XEON55XX_UNC_PerfCtrNum){
		printk("+->topmc: topmc_value_write(): counter err : %d!!!\n",counter);
		return 0;
	}

	//FIXME:just set counter to zero
	if(counter < TOPMC_MSR_XEON55XX_PerfCtrNum){
		//first: clear the event selector
		TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+counter, val, cpu);
		//        printk("+->incore event selector val: 0x%llu\n", val);
		val &= MSR_PPRO_EVENTSEL_RESERVED;
		TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+counter, val, cpu);

		//second: clear the counter
		TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_PERFCTR0+counter, 0LL, cpu);
	}
	else if (counter < TOPMC_MSR_XEON55XX_PerfCtrNum + TOPMC_MSR_XEON55XX_UNC_PerfCtrNum) {
		//first: clear the event selector
		TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+counter-TOPMC_MSR_XEON55XX_PerfCtrNum, val, cpu);
		//      printk("+->uncore event selector val: 0x%llu\n", val);
		//val &= TOPMC_MSR_XEON55XX_UNC_EVENTSEL_RESERVED;
		val &= 0ULL;
		TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+counter-TOPMC_MSR_XEON55XX_PerfCtrNum, val, cpu);

		//second: clear the counter
		TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_PERFCTR0+counter, 0LL, cpu);
	}


	return count;
}

void topmc_msr_init(void)
{
	int i,cpu;
	u64 val;

	for_each_online_cpu(cpu){
		//      printk("+-> topmc_msr_init(): cpu:%d\n",cpu);

		/* in core section */
		//first: clear the event selectors
		for (i = 0 ; i < TOPMC_MSR_XEON55XX_PerfCtrNum; ++i) {
			if (unlikely(!TOPMC_MSR_XEON55XX_EVNTSEL0+i))
				continue;
			TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+i, val, cpu);
			val &= MSR_PPRO_EVENTSEL_RESERVED;
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_EVNTSEL0+i, val, cpu);
		}

		//second: clear the counter
		for (i = 0; i < TOPMC_MSR_XEON55XX_PerfCtrNum; ++i) {
			if (unlikely(!TOPMC_MSR_XEON55XX_PERFCTR0+i))
				continue;
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_PERFCTR0+i, 0LL, cpu);
		}

		/* uncore section */
		for (i = 0; i < TOPMC_MSR_XEON55XX_UNC_PerfCtrNum; ++i) {
			if (unlikely(!TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+i))
				continue;
			TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+i, val, cpu);
			val &= 0ULL;
			//val &= TOPMC_MSR_XEON55XX_UNC_EVENTSEL_RESERVED;
			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_EVNTSEL0+i, val, cpu);
		}

		for (i = 0; i < TOPMC_MSR_XEON55XX_UNC_PerfCtrNum; ++i) {
			if (unlikely(!TOPMC_MSR_XEON55XX_UNC_PERFCTR0+i))
				continue;

			TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_PERFCTR0+i, 0LL, cpu);
		}

	}
}

void topmc_core_global_ctrl_init(void)
{
	u64 mask;
	int cpu;

	for_each_online_cpu(cpu) {
		TOPMC_RDMSRL(MSR_CORE_PERF_GLOBAL_CTRL, mask, cpu);
		mask &=0ULL;
		mask |= ((1ULL << MSR_CORE_PERF_NUM_PMC) -1) << MSR_CORE_PERF_IDX_PMC;
		mask |= ((1ULL << MSR_CORE_PERF_NUM_FIX) -1) << MSR_CORE_PERF_IDX_FIX;
		TOPMC_WRMSRL(MSR_CORE_PERF_GLOBAL_CTRL, mask, cpu);
		TOPMC_RDMSRL(MSR_CORE_PERF_GLOBAL_CTRL, mask, cpu);
		//      printk("+->topmc: topmc_core_global_ctrl_init(): global control mask -> %llu\n", mask);

		TOPMC_RDMSRL(MSR_CORE_PERF_GLOBAL_OVF_CTRL, mask, cpu);
		//      printk("+->topmc: topmc_core_global_ctrl_init(): global overflow control mask -> %llu\n", mask);
	}
}

/* initialization uncore global msrs*/
void topmc_uncore_global_ctrl_init(void)
{
	u64 mask;
	int cpu;

	for_each_online_cpu(cpu) {
		// initialization global control msr
		TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_UNC_GLOBAL_CTRL, mask, cpu);
		mask &= 0ULL;
		mask |= ((1ULL << TOPMC_MSR_XEON55XX_UNC_BITS_NUM_PMC) - 1) << TOPMC_MSR_XEON55XX_UNC_IDX_PMC;
		mask |=  (1ULL << TOPMC_MSR_XEON55XX_UNC_IDX_FIXED);
		mask |= 1ULL <<( 48 + cpu%4);
		//mask |= 1ULL << ( 48 + cpu_data(smp_processor_id()).cpu_core_id);
		//      printk("+->topmc: topmc_uncore_global_ctrl_init(): global control mask-> %llu\n",mask);
		TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_GLOBAL_CTRL, mask, cpu);

		//initialization global global overflow control msr ----------not needed at the moment
		TOPMC_WRMSRL(TOPMC_MSR_XEON55XX_UNC_GLOBAL_OVF_CTRL, 0ULL, cpu);
		//    TOPMC_RDMSRL(TOPMC_MSR_XEON55XX_UNC_GLOBAL_OVF_CTRL, mask, cpu);
		//  printk("+->topmc: topmc_uncore_global_ctrl_init(): global overflowed control mask-> %llu\n",mask);
	}
}


void topmc_enable_rdpmc(void)
{
	int cpu;
	int err;

	for_each_online_cpu(cpu) {
		err = topmc_write_cr4_pce(cpu);
		if(err)
		{
			printk("topmc_enable_rdpmc error: cpu:%d ...\n",cpu);
			return;
		}
	}

}

/* proc filesystem clean process: entry -> counter -> core -> topmc
 */

void topmc_proc_clean(void)
{

	//int i;
	int cpu,counter;
	char namebuf[TOPMC_MAX_NAMELEN];

	if(enable_entry) {
		remove_proc_entry("enable_all",root_dir);
		enable_entry = NULL;
	}

	for_each_online_cpu(cpu){
		if(core_dir[cpu]) {
			for(counter=0;counter<TOPMC_MSR_XEON55XX_PerfCtrNum + TOPMC_MSR_XEON55XX_UNC_PerfCtrNum;counter++){
				if(counter_dir[cpu][counter]) {
					if(entry[cpu][counter][0]) {
						remove_proc_entry("enable",counter_dir[cpu][counter]); 
						entry[cpu][counter][0]=NULL;
					}
					if(entry[cpu][counter][1]) {
						remove_proc_entry("event",counter_dir[cpu][counter]); 
						entry[cpu][counter][1]=NULL;
					}
					if(entry[cpu][counter][2]) {
						remove_proc_entry("value",counter_dir[cpu][counter]); 
						entry[cpu][counter][2]=NULL;
					}
					memset(namebuf,0,TOPMC_MAX_NAMELEN);
					if( counter < TOPMC_MSR_XEON55XX_PerfCtrNum) {
						sprintf(namebuf,"incore_counter%d",counter);
					}
					if( counter >= TOPMC_MSR_XEON55XX_PerfCtrNum) {
						sprintf(namebuf, "uncore_counter%d",counter- TOPMC_MSR_XEON55XX_PerfCtrNum);
					}
					remove_proc_entry(namebuf,core_dir[cpu]);
					counter_dir[cpu][counter] = NULL;
				}
			}
			memset(namebuf,0,TOPMC_MAX_NAMELEN);	
			sprintf(namebuf,"core%02d",cpu);
			remove_proc_entry(namebuf,root_dir);
			core_dir[cpu]=NULL;
		} 
	}

	if(root_dir) {
		remove_proc_entry("topmc",NULL);
		root_dir = NULL;
	}

}

void topmc_model_detect(void)
{
	__u8 vendor = boot_cpu_data.x86_vendor;
	__u8 family = boot_cpu_data.x86;

	if(!cpu_has_apic)
		return -ENODEV;
	switch(vendor) {
	case X86_VENDOR_AMD:
		switch(family) {
		case 6:
			model = &op_amd_topmc;
			break;
		deault:
			break;
		}
		break;
	
	case X86_VENDOR_INTEL:
		switch(family) {
		case 26:
			model = &op_intel_nehelam_topmc;
			break;
		default:
			break;
		}
		break;
	defualt:
		break;
	}
}
/*                      
 *                      
 *topmc->core*->counter*->entry
 *
 **/
int topmc_init(void)
{
	int ret = 0;
	int cpu,counter;
	unsigned int mix_cpu_counter;
//	struct proc_dir_entry * root_dir, * core_dir, * counter_dir;
//	struct proc_dir_entry * entry;
	char namebuf[TOPMC_MAX_NAMELEN];

	printk("+->topmc_init() start...\n");

	if(!topmc_procs) {
		ret = -ENOMEM;
		return ret;
	}	
	
	topmc_model_detect();

	topmc_core_global_ctrl_init();
	topmc_uncore_global_ctrl_init();
	topmc_msr_init();
	memset(topmc_procs,0,sizeof(topmc_procs));

	root_dir        = proc_mkdir("topmc",NULL);
	if(!root_dir){
		printk("mkprocdir topmc error\n");
		ret = -ENOMEM;
		return ret;
	}


	enable_entry   = create_proc_entry("enable_all",0666,root_dir);
	if(enable_entry == NULL){
		//vfree(topmc_procs);
		remove_proc_entry("topmc",NULL);
		//proc_rmdir(root_dir);
		ret = -ENOMEM;
		printk("topmc_mod: create enable_all entry error\n");
		return ret;
    	}else {
		enable_entry->read_proc        = topmc_enable_all_read;
		enable_entry->write_proc       = topmc_enable_all_write;
	}

	for_each_online_cpu(cpu){
		printk("+->topmc_init(): cpu:%d\n",cpu);
		memset(namebuf,0,TOPMC_MAX_NAMELEN);
		sprintf(namebuf,"core%02d",cpu);
		core_dir[cpu]        = proc_mkdir(namebuf,root_dir);
		if(!core_dir[cpu]){
			printk("mkprocdir %s  error\n",namebuf);
			topmc_proc_clean();
			ret = -ENOMEM;
			return ret;
		}

		for(counter=0;counter<TOPMC_MSR_XEON55XX_PerfCtrNum + TOPMC_MSR_XEON55XX_UNC_PerfCtrNum;counter++){
			memset(namebuf,0,TOPMC_MAX_NAMELEN);
			if( counter < TOPMC_MSR_XEON55XX_PerfCtrNum) {
				sprintf(namebuf,"incore_counter%d",counter);
			}
			if( counter >= TOPMC_MSR_XEON55XX_PerfCtrNum) {
				sprintf(namebuf, "uncore_counter%d",counter- TOPMC_MSR_XEON55XX_PerfCtrNum);
			}
			counter_dir[cpu][counter]        = proc_mkdir(namebuf,core_dir[cpu]);
			if(!counter_dir[cpu][counter]){
				printk("mkprocdir %s  error\n",namebuf);
				topmc_proc_clean();
				ret = -ENOMEM;
				return ret;
			}

			mix_cpu_counter = topmc_mix16to32((unsigned short)cpu, (unsigned short)counter);
			entry[cpu][counter][0]   = create_proc_entry("enable",0666,counter_dir[cpu][counter]);
			if(entry[cpu][counter][0]){
				entry[cpu][counter][0]->data                     = (void *)(unsigned long)mix_cpu_counter;
				entry[cpu][counter][0]->read_proc        = topmc_enable_read;
				entry[cpu][counter][0]->write_proc       = topmc_enable_write;
			}
			else {
				printk("topmc_mod: create procfile %s error\n",namebuf);
				topmc_proc_clean();
				ret = -ENOMEM;
				return ret;
	    		}

			entry[cpu][counter][1]   = create_proc_entry("event",0666,counter_dir[cpu][counter]);
			if(entry[cpu][counter][1]){
				entry[cpu][counter][1]->data                     = (void *)(unsigned long)mix_cpu_counter;
				entry[cpu][counter][1]->read_proc        = topmc_event_read;
				entry[cpu][counter][1]->write_proc       = topmc_event_write;
			}
			else {
				printk("topmc_mod: create procfile %s error\n",namebuf);
				topmc_proc_clean();
				ret = -ENOMEM;
				return ret;
	    		}
			entry[cpu][counter][2]   = create_proc_entry("value",0666,counter_dir[cpu][counter]);
			if(entry[cpu][counter][2]){
				entry[cpu][counter][2]->data                     = (void *)(unsigned long)mix_cpu_counter;
				entry[cpu][counter][2]->read_proc        = topmc_value_read;
				entry[cpu][counter][2]->write_proc       = topmc_value_write;
			}
			else {
				printk("topmc_mod: create procfile %s error\n",namebuf);
				topmc_proc_clean();
				ret = -ENOMEM;
				return ret;
			}
		}
	}

	topmc_enable_rdpmc();
#ifdef TOPMC_PER_SECOND
	topmc_value_read_callable = &topmc_value_read_callable_impl;
#endif

	return ret;
}



void topmc_cleanup(void )
{
	printk("+->topmc_mod: unloaded\n");
	topmc_proc_clean();


}

module_init( topmc_init );
module_exit( topmc_cleanup );


